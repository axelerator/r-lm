
-- generated by elm_rs


module Generated.Bindings exposing (..)

import Dict exposing (Dict)
import Http
import Json.Decode
import Json.Encode
import Url.Builder


resultEncoder : (e -> Json.Encode.Value) -> (t -> Json.Encode.Value) -> (Result e t -> Json.Encode.Value)
resultEncoder errEncoder okEncoder enum =
    case enum of
        Ok inner ->
            Json.Encode.object [ ( "Ok", okEncoder inner ) ]
        Err inner ->
            Json.Encode.object [ ( "Err", errEncoder inner ) ]


resultDecoder : Json.Decode.Decoder e -> Json.Decode.Decoder t -> Json.Decode.Decoder (Result e t)
resultDecoder errDecoder okDecoder =
    Json.Decode.oneOf
        [ Json.Decode.map Ok (Json.Decode.field "Ok" okDecoder)
        , Json.Decode.map Err (Json.Decode.field "Err" errDecoder)
        ]


type ToBackend
    = Connect


toBackendEncoder : ToBackend -> Json.Encode.Value
toBackendEncoder enum =
    case enum of
        Connect ->
            Json.Encode.string "Connect"

type ToFrontend
    = Welcome (String)
    | SessionExpired


toFrontendDecoder : Json.Decode.Decoder ToFrontend
toFrontendDecoder = 
    Json.Decode.oneOf
        [ Json.Decode.map Welcome (Json.Decode.field "Welcome" (Json.Decode.string))
        , Json.Decode.string
            |> Json.Decode.andThen
                (\x ->
                    case x of
                        "SessionExpired" ->
                            Json.Decode.succeed SessionExpired
                        unexpected ->
                            Json.Decode.fail <| "Unexpected variant " ++ unexpected
                )
        ]

